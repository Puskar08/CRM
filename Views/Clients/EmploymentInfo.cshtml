@model EmploymentInfoModel

<div class="page">
    <div>
        <div class="page-body">
            <div>
                <div class="container" style="padding: 0;">
                    <div class="header">
                        <h1> Employment and Income</h1>
                    </div>

                    <form id="employment-form">
                        @Html.AntiForgeryToken()
                        <div class="form-container">
                            <div class="form-group">
                                <label for="employmentStatus">What is your employment status?</label>
                                <select id="employmentStatus" name="employmentStatus" class="form-control" required>
                                    <option value="" selected>Please Select</option>
                                    <option value="Employed"
                                        selected="@(Model.EmploymentStatus == "Employed" ? "selected" : null)">Employed
                                    </option>
                                    <option value="Unemployed"
                                        selected="@(Model.EmploymentStatus == "Unemployed" ? "selected" : null)">
                                        Unemployed</option>
                                    <option value="Self-Employed"
                                        selected="@(Model.EmploymentStatus == "Self-Employed" ? "selected" : null)">
                                        Self-Employed</option>
                                    <option value="Student"
                                        selected="@(Model.EmploymentStatus == "Student" ? "selected" : null)">Student
                                    </option>
                                    <option value="Retired"
                                        selected="@(Model.EmploymentStatus == "Retired" ? "selected" : null)">Retired
                                    </option>
                                </select>
                            </div>

                            <div class="form-group">
                                <label for="annualIncome">What is your annual income (US Dollars)?</label>
                                <select id="annualIncome" name="annualIncome" class="form-control" required>
                                    <option value="" selected>Please Select</option>
                                    <option value="1000-2000">$1000-$5000</option>
                                    <option value="2000-3000">$5000-$10000</option>
                                    <option value="3000-4000">$10000-$20000</option>
                                    <option value="Above 4000">$Above-$20000</option>
                                </select>
                            </div>

                            <div class="form-group">
                                <label for="primarySourceOfTradingFund">What is the primary source of your trading
                                    funds?</label>
                                <select id="primarySourceOfTradingFund" name="primarySourceOfTradingFund"
                                    class="form-control" required>
                                    <option value="" selected>Please Select</option>
                                    <option value="income">Income</option>
                                    <option value="unemployment">Unemployment Benefits</option>
                                    <option value="business">Business Income</option>
                                    <option value="studentLoan">Student Loans</option>
                                    <option value="pension">Pension</option>
                                </select>
                            </div>

                            <div class="form-group">
                                <label for="tradingObjective">What is your trading objective?</label>
                                <select id="tradingObjective" name="tradingObjective" class="form-control" required>
                                    <option value="" selected>Please Select</option>
                                    <option value="income">Generate Income</option>
                                    <option value="speculation">Speculation</option>
                                    <option value="hedging">Hedging</option>
                                    <option value="algo">Algo Trading</option>
                                </select>
                            </div>

                            <div class="form-group">
                                <label for="degreeOfRisk">Please select the degree of risk you are willing to take with
                                    the assets in this account</label>
                                <select id="degreeOfRisk" name="degreeOfRisk" class="form-control" required>
                                    <option value="" selected>Please Select</option>
                                    <option value="low">Low</option>
                                    <option value="medium">Moderate</option>
                                    <option value="high">High</option>
                                </select>
                            </div>

                            <button type="submit" id="btnContinue" class="btn-submit">Continue <i
                                    class="fas fa-arrow-right"></i>
                            </button>
                            <button type="button" id="btnBack" class="btn-back">Back <i class="fas fa-arrow-left"></i>
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {

        document.getElementById("employment-form").addEventListener("submit", function () {
            debugger;

            // Handle form submission
            var employmentStatus = document.getElementById("employmentStatus").value;
            if (!employmentStatus) {
                Swal.fire({
                    toast: true,
                    position: 'top-end',
                    icon: 'error',
                    title: 'Error!',
                    text: 'Please select your employment status.',
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true
                });
                return; // Prevent form submission if validation fails
            }

            const formData = {
                employmentStatus: document.getElementById("employmentStatus").value,
                annualIncome: document.getElementById("annualIncome").value,
                primarySourceOfTradingFund: document.getElementById("primarySourceOfTradingFund").value,
                tradingObjective: document.getElementById("tradingObjective").value,
                degreeOfRisk: document.getElementById("degreeOfRisk").value,
            }
            fetch('/Clients/SaveEmploymentInfo', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify(formData)
            })
                .then(response => response.json())
                .then(responseData => {
                    if (responseData.success) {
                        console.log("Registration successful");
                        debugger;
                        Swal.fire({
                            toast: true,
                            position: 'top-end',
                            icon: 'success',
                            title: 'Success!',
                            text: responseData.message || "Registration successful.",
                            showConfirmButton: false,
                            timer: 3000,
                            timerProgressBar: true
                        })
                        window.location.href = responseData.redirectUrl || '/Register/EmploymentInfo';
                    } else {
                        Swal.fire({
                            toast: true,
                            position: 'top-end',
                            icon: 'error',
                            title: 'Error!',
                            text: responseData.message || "An error occurred.",
                            showConfirmButton: false,
                            timer: 3000,
                            timerProgressBar: true
                        });
                    }
                })
                .catch(error => {
                    Swal.fire({
                        toast: true,
                        position: 'top-end',
                        icon: 'error',
                        title: 'Error!',
                        text: 'An error occurred while submitting the form.',
                        showConfirmButton: false,
                        timer: 3000,
                        timerProgressBar: true
                    });
                });
            
            @* .then(response => response.json())
                .then(responseData => {
                    console.log('response received');
                    console.log('Response data:', responseData);
                    if (responseData.success) {
                        window.location.href = responseData.redirectUrl; // No fallback
                    } else {
                        Swal.fire({
                            toast: true,
                            position: 'top-end',
                            icon: 'error',
                            title: 'Error!',
                            text: responseData.message || 'An error occurred.',
                            showConfirmButton: false,
                            timer: 3000,
                            timerProgressBar: true
                        });
                        if (responseData.redirectUrl) {
                            setTimeout(() => {
                                window.location.href = responseData.redirectUrl;
                            }, 3000);
                        }
                    }
                })
                .catch(error => {
                    console.log('Fetch error:', error);
                    Swal.fire({
                        toast: true,
                        position: 'top-end',
                        icon: 'error',
                        title: 'Error!',
                        text: error.message || 'An error occurred while submitting the form.',
                        showConfirmButton: false,
                        timer: 3000,
                        timerProgressBar: true
                    });
                }); *@
        });

        document.getElementById("btnBack").addEventListener("click", function (event) {
            event.preventDefault();
            window.location.href = "/Clients/RegisterClient"; // Redirect to the previous page
        });
    })
</script>