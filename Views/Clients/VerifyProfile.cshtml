<style>
    .step-container {
        display: none;
    }

    .step-container.active {
        display: block;
    }

    .content {
        padding: 30px;
    }

    .steps {
        display: flex;
        flex-direction: column;
        gap: 24px;
    }

    .step {
        display: flex;
        align-items: flex-start;
        gap: 16px;
    }

    .step-icon {
        width: 50px;
        height: 50px;
        background: #f6f6f6;
        border-radius: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: cadetblue;
        font-size: 20px;
        flex-shrink: 0;
    }

    .step-content {
        flex: 1;
    }

    .step-number {
        font-size: 14px;
        font-weight: 550;
        color: #808080;
        margin-bottom: 4px;
    }

    .step-text {
        font-size: 16px;
        color: #333;
        line-height: 1.4;
    }

    .divider {
        height: 1px;
        background: #eaeaea;
        margin: 24px 0;
    }

    select,
    input[type="file"] {
        width: 100%;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 8px;
        font-size: 1rem;
    }

    .upload-area {
        border: 2px dashed #ddd;
        border-radius: 12px;
        padding: 30px;
        text-align: center;
        cursor: pointer;
        transition: all 0.3s;
        position: relative;
        min-height: 200px;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        overflow: hidden;
    }

    .upload-area:hover {
        border-color: #3a86ff;
        background-color: #f8fbff;
    }

    .upload-area.has-file {
        border-style: solid;
        border-color: #3a86ff;
        background-color: #f0f7ff;
    }

    .upload-icon {
        font-size: 48px;
        color: #ccc;
        margin-bottom: 15px;
        transition: all 0.3s;
    }

    .upload-area:hover .upload-icon {
        color: #3a86ff;
    }

    .upload-text {
        color: #777;
        margin-bottom: 5px;
    }

    .upload-hint {
        color: #999;
        font-size: 14px;
    }

    .file-preview {
        max-width: 100%;
        max-height: 150px;
        border-radius: 8px;
        display: none;
    }

    .delete-btn {
        position: absolute;
        top: 10px;
        right: 10px;
        background: rgba(255, 255, 255, 0.9);
        border: none;
        border-radius: 50%;
        width: 36px;
        height: 36px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        color: #ff4d4f;
        font-size: 18px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
        opacity: 0;
        transition: opacity 0.3s;
        z-index: 10;
    }

    .upload-area.has-file .delete-btn {
        opacity: 1;
    }

    .delete-btn:hover {
        background: #ff4d4f;
        color: white;
        transform: scale(1.1);
    }

    .file-info {
        margin-top: 15px;
        font-style: italic;
        color: #666;
        text-align: center;
    }

    .instructions {
        background: #f8f9fa;
        padding: 15px;
        border-radius: 8px;
        margin-bottom: 20px;
        font-size: 14px;
        color: #666;
    }

    .instructions h4 {
        margin-bottom: 8px;
        color: #333;
    }

    .instructions ul {
        padding-left: 20px;
    }

    .instructions li {
        font-size: 15px;
        margin-bottom: 5px;
    }

    .instructions p {
        font-size: 15px;
        margin-bottom: 5px;
    }

    .btn-submit:hover:not(:disabled) {
        transform: translateY(-2px);
    }

    .btn-submit:disabled {
        background: #ccc;
        cursor: not-allowed;
        transform: none;
    }
</style>

<div class="container" style="padding: 0;">
    @Html.AntiForgeryToken()
    <!--step 1-->
    <div class="step-container active" id="step1-container-content">
        <div class="header">
            <h1>Let's get you verified</h1>
        </div>

        <div class="content">
            <p>Follow the simple steps below</p>
            <div class="steps">
                <div class="step">
                    <div class="step-icon">
                        <i class="fas fa-id-card"></i>
                    </div>
                    <div class="step-content">
                        <div class="step-number">Step 1</div>
                        <div class="step-text">Provide identity document</div>
                    </div>
                </div>

                <div class="step">
                    <div class="step-icon">
                        <i class="fas fa-home"></i>
                    </div>
                    <div class="step-content">
                        <div class="step-number">Step 2</div>
                        <div class="step-text">Provide address information</div>
                    </div>
                </div>
            </div>

            <div class="divider"></div>

            <button type="button" class="btn-submit btn-continue" data-container-step="1">Continue</button>
        </div>
    </div>

    <!--setep 2-->
    <div class="step-container" id="step2-container-content">
        <div class="header">
            <h1>Upload your Government ID</h1>
        </div>

        <div class="content">
            <div class="instructions">
                <h4>Accepted Documents:</h4>
                <ul>
                    <li>Driver's License</li>
                    <li>Passport</li>
                    <li>National ID Card</li>
                </ul>
                <p>Make sure your document is clear and all information is visible.</p>
            </div>

            <div class="one-column-form">
                <div class="form-group">
                    <label for="gov-document-type">Document Type *</label>
                    <select id="gov-document-type" class="document-type">
                        <option value="">Select document type</option>
                        <option value="passport">Passport</option>
                        <option value="license">Driver's License</option>
                        <option value="idcard">National ID Card</option>
                    </select>
                </div>

                <div class="form-group">
                    <label>Upload Document *</label>
                    <div class="upload-area" id="gov-upload-area" data-target-file-input="gov-id-upload"
                        data-target-document-selection="gov-document-type">
                        <i class="fas fa-cloud-upload-alt upload-icon"></i>
                        <p class="upload-text">Click to upload or drag and drop</p>
                        <p class="upload-hint">Max file size: 5MB</p>
                        <img class="file-preview" alt="Document preview">
                        <button class="delete-btn">
                            <i class="fas fa-trash"></i>
                        </button>
                        <input type="file" id="gov-id-upload" class="file-input" accept="image/*,.pdf"
                            style="display: none;">
                    </div>
                    <div class="file-info" id="gov-file-name"></div>
                </div>
            </div>
            <div class="divider"></div>

            <button type="button" class="btn-submit submit-file" data-container-step="2"
                data-document-section="governmentDocument" disabled id="submit-gov-btn">Submit</button>
        </div>
    </div>

    <!--setep 3-->
    <div class="step-container" id="step3-container-content">
        <div class="header">
            <h1>Upload Proof of Address</h1>
        </div>

        <div class="content">
            <div class="instructions">
                <h4>Accepted Documents:</h4>
                <ul>
                    <li>Bank Statement (issue in last 6 months)</li>
                    <li>Utility bill (e.g. phone, gas, water, electric, mobile phone, internet, or cable bill issued in
                        the last 6 months)
                    </li>
                </ul>
                <p>Make sure your document is clear and all information is visible.</p>
            </div>

            <div class="one-column-form">
                <div class="form-group">
                    <label for="add-document-type">Document Type *</label>
                    <select id="add-document-type" class="document-type">
                        <option value="">Select document type</option>
                        <option value="bankstatement">Bank Statement</option>
                        <option value="utilitybill">Utility-Bill</option>
                    </select>
                </div>

                <div class="form-group">
                    <label>Upload Document *</label>
                    <div class="upload-area" id="add-upload-area" data-target-file-input="add-id-upload"
                        data-target-document-selection="add-document-type">
                        <i class="fas fa-cloud-upload-alt upload-icon"></i>
                        <p class="upload-text">Click to upload or drag and drop</p>
                        <p class="upload-hint">Max file size: 5MB</p>
                        <img class="file-preview" alt="Document preview">
                        <button class="delete-btn"><i class="fas fa-trash"></i></button>
                        <input type="file" id="add-id-upload" class="file-input" accept="image/*,.pdf"
                            style="display: none;">
                    </div>
                    <div class="file-info" id="add-file-name"></div>
                </div>
            </div>
            <div class="divider"></div>

            <button type="button" class="btn-submit submit-file" data-container-step="3"
                data-document-section="proofOfAddDocument" disabled>Submit</button>
        </div>
    </div>

</div>

<script>
    // Pass ViewBag.TargetUserId to a local variable
    var targetUserId = '@ViewBag.TargetUserId' || '';
    const continueBtn = document.querySelectorAll('.btn-continue');
    const stepContainers = document.querySelectorAll('.step-container');
    continueBtn.forEach(btn => {
        btn.addEventListener('click', function () {
            continueOrSubmitBtnClick(btn);
        });
    })

    function continueOrSubmitBtnClick(btn) {
        debugger;
        const step = btn.getAttribute('data-container-step');
        const nextStep = parseInt(step) + 1;
        if (nextStep > 1 && nextStep <= stepContainers.length) {
            // show navigation if current step is greater than 1
            showStep(nextStep);
            @* if (currentStep > 1) {
                navigation.style.display = 'flex';
            } *@
        }
    }

    function showStep(stepNumber) {
        debugger;
        stepContainers.forEach(content => {
            content.classList.remove('active');
        });
        document.getElementById(`step${stepNumber}-container-content`).classList.add('active');
    }

    // upload-area event listener
    const uploadAreas = document.querySelectorAll('.upload-area');
    uploadAreas.forEach(area => {
        area.addEventListener('click', function (e) {
            const deleteBtn = this.querySelector('.delete-btn'); // child button

            // if the delete button (or its icon) was clicked → stop here
            if (deleteBtn && (e.target === deleteBtn || deleteBtn.contains(e.target))) {
                return;
            }

            const fileInput = document.getElementById(area.getAttribute("data-target-file-input"));
            const documentType = document.getElementById(area.getAttribute("data-target-document-selection"))?.value;

            if (fileInput && documentType) {
                fileInput.click();
            } else {
                Swal.fire({
                    toast: true,
                    position: 'top-end',
                    icon: 'warning',
                    title: 'Warning!',
                    text: 'Please select the document type.',
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true
                });
            }
        });
    });


    // helper to get all elements inside a form-group
    function getFormGroupElements(formGroup) {
        return {
            fileInput: formGroup.querySelector('.file-input'),
            filePreview: formGroup.querySelector('.file-preview'),
            uploadIcon: formGroup.querySelector('.upload-icon'),
            uploadText: formGroup.querySelector('.upload-text'),
            uploadHint: formGroup.querySelector('.upload-hint'),
            uploadArea: formGroup.querySelector('.upload-area'),
            fileInfo: formGroup.querySelector('.file-info'),
            submitBtn: formGroup.closest('.content').querySelector('.btn-submit')
        };
    }

    //file-input event listener
    const fileInputs = document.querySelectorAll('.file-input');
    fileInputs.forEach(fileinput => {
        fileinput.addEventListener('change', function (e) {
            e.preventDefault();
            if (this.files.length > 0) {
                const file = this.files[0];
                //select the closest form-group
                const formGroup = this.closest('.form-group');
                const elements = getFormGroupElements(formGroup);

                //display the file name in the file-info
                elements.fileInfo.textContent = `Selected file: ${file.name} (${(file.size / 1024 / 1024).toFixed(2)} MB)`;

                //show preview for images
                if (file.type.startsWith('image/')) {
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        //diplay image inside file-preview
                        elements.filePreview.src = e.target.result;
                        elements.filePreview.style.display = 'block';

                        //hide upload text and icon
                        elements.uploadIcon.style.display = 'none';
                        elements.uploadText.style.display = 'none';
                        elements.uploadHint.style.display = 'none';

                        // Add class to indicate file is present
                        elements.uploadArea.classList.add('has-file');
                    }
                    reader.readAsDataURL(file);
                } else {
                    // For PDF files, show a PDF icon
                    elements.filePreview.style.display = 'none';
                    elements.uploadIcon.className = 'fas fa-file-pdf upload-icon';
                    elements.uploadIcon.style.display = 'block';
                    elements.uploadText.textContent = file.name;
                    elements.uploadHint.textContent = 'PDF Document';

                    // Add class to indicate file is present
                    elements.uploadArea.classList.add('has-file');
                }
                //enable submit button
                elements.submitBtn.disabled = false;
            }
        });
    });

    //delete button functionlity
    const deleteBtns = document.querySelectorAll('.delete-btn');
    deleteBtns.forEach(delBtn => {
        delBtn.addEventListener('click', function (e) {
            e.stopPropagation(); //prevent triggering the file input

            //reset the file input
            const formGroup = this.closest('.form-group');
            const elements = getFormGroupElements(formGroup);


            elements.fileInput.value = '';

            elements.filePreview.style.display = 'none';
            elements.filePreview.src = '';

            elements.uploadIcon.className = 'fas fa-cloud-upload-alt upload-icon';
            elements.uploadIcon.style.display = 'block';

            elements.uploadText.textContent = 'Click to upload or drag and drop';
            elements.uploadText.style.display = 'block';

            elements.uploadHint.textContent = 'Max file size: 5MB';
            elements.uploadHint.style.display = 'block';

            elements.uploadArea.classList.remove('has-file');
            //clear file info
            elements.fileInfo.textContent = '';
            //disable submit button
            elements.submitBtn.disabled = true;
        })
    })

    // Handle form submission
    const fileSubmitBtns = document.querySelectorAll('.submit-file');
    fileSubmitBtns.forEach(filesubmitBtn => {
        filesubmitBtn.addEventListener('click', async function (e) {
            e.preventDefault();
            const content = this.closest('.content');
            const documentType = content.querySelector('.document-type');
            const fileInput = content.querySelector('.file-input');
            const documentSection = this.getAttribute('data-document-section');
            if (!documentType.value) {
                Swal.fire({
                    toast: true,
                    position: 'top-end',
                    icon: 'warning',
                    title: 'Warning!',
                    text: 'Please select a document type.',
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true
                });
                return;
            }
            if (!fileInput.files[0]) {
                Swal.fire({
                    toast: true,
                    position: 'top-end',
                    icon: 'warning',
                    title: 'Warning!',
                    text: 'Please upload a document.',
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true
                });
                return;
            }

            const formData = new FormData();
            formData.append('documentType', documentType.value);
            formData.append('file', fileInput.files[0]);
            formData.append('documentSection', documentSection);
            let url = '/Clients/DocumentUpload';
            if (targetUserId && targetUserId.trim() !== '') {
                url += '?targetUserId=' + encodeURIComponent(targetUserId.trim());
            }
            try {
                const response = await fetch(url, {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                });

                let responseData;
                try {
                    responseData = await response.json();
                } catch (parseError) {
                    throw new Error("Invalid JSON response from the server.");
                }

                if (response.ok) {
                    if (responseData.success) {
                        Swal.fire({
                            toast: true,
                            position: 'top-end',
                            icon: 'success',
                            title: 'Success!',
                            text: responseData.message || 'Document uploaded successfully.',
                            showConfirmButton: false,
                            timer: 3000,
                            timerProgressBar: true
                        }).then(() => {
                            if (responseData.redirectUrl) {
                                window.location.href = responseData.redirectUrl;
                            }
                            continueOrSubmitBtnClick(filesubmitBtn);
                        })
                    }
                    else {
                        Swal.fire({
                            toast: true,
                            position: 'top-end',
                            icon: 'error',
                            title: 'Error!',
                            text: responseData.message,
                            showConfirmButton: false,
                            timer: 3000,
                            timerProgressBar: true
                        });

                    }
                }
                else {
                    Swal.fire({
                        toast: true,
                        position: 'top-end',
                        icon: 'error',
                        title: 'Error!',
                        text: responseData.message || `HTTP error ${response.status}`,
                        showConfirmButton: false,
                        timer: 3000,
                        timerProgressBar: true
                    });
                }
            } catch (error) {
                Swal.fire({
                    toast: true,
                    position: 'top-end',
                    icon: 'error',
                    title: 'Error!',
                    text: 'An error occurred while uploading the document.',
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true
                });
            }
        });
    });

</script>