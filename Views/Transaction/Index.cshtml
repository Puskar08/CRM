@model IEnumerable<CRM.Models.TransactionViewModel>

@{
    ViewData["Title"] = "Clients";
}
<style>
    #loginIdSuggestions {
        max-height: 200px;
        overflow-y: auto;
    }

    .no-data {
        text-align: center;
        padding: 40px;
        color: #7f8c8d;
    }

    .no-data i {
        font-size: 48px;
        margin-bottom: 15px;
        color: #e1e4e8;
    }
</style>

<!-- Modal -->
<div class="modal fade" id="TransactionModal" tabindex="-1" aria-labelledby="TransactionModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="TransactionModalLabel">Add Transaction</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form class="form-horizontal" id="transactionForm"
                    action="@Url.Action("CreateTransaction", "Transaction")" method="post">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="loginId" class="form-label">Login ID</label>
                            <input type="text" class="form-control" id="loginId" name="loginId" required
                                autocomplete="off" />
                            <ul id="loginIdSuggestions" class="list-group position-absolute"
                                style="z-index: 1000; display: none;"></ul>
                        </div>
                        <div class="col-md-6">
                            <label for="fee" class="form-label">Transaction Type</label>
                            <select class="form-select" id="transactionType" name="transactionType" required>
                                <option value="Deposit">Deposit</option>
                                <option value="Withdraw">Withdraw</option>
                            </select>
                        </div>

                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="amount" class="form-label">Amount</label>
                            <input type="number" class="form-control roundable" id="amount" name="amount" min="0.00"
                                value="0.00" step="0.01" required />
                        </div>
                        <div class="col-md-6">
                            <label for="fee" class="form-label">Fee</label>
                            <input type="number" class="form-control roundable" id="fee" name="fee" min="0.00"
                                value="0.00" step="0.01" required />
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-12">
                            <label for="transactionNote" class="form-label">Transaction Note</label>
                            <input type="text" class="form-control" id="transactionNote" name="transactionNote" />
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" id="submitTransaction" class="btn btn-primary">Submit</button>
                <button type="button" id="submitAndApproveTransaction" class="btn btn-success">Submit &
                    Approve</button>
            </div>
        </div>
    </div>
</div>
<div class="page">
    <!-- Page Header -->
    <div class="page-header">
        <div class="page-title">
            <h2>Transactions</h2>
            <p>Manage and review all transactions</p>
        </div>
        <div class="page-actions d-flex gap-2">
            <!-- Button trigger modal -->
            <button type="button" class="add-button" data-bs-toggle="modal" data-bs-target="#TransactionModal">
                <i class="fas fa-plus"></i> Add Transaction
            </button>
        </div>
    </div>

    <!-- Page Body -->
    <div class="page-body">
        @* <div class="body-filter d-flex justify-content-between align-items-center gap-2">
            <select class="form-select" name="transactionType" id="filterTransactionType">
                <option value="All">All Transactions</option>
                <option value="Deposit">Deposits</option>
                <option value="Withdraw">Withdrawals</option>
            </select>
            <select class="form-select" id="filterStatus" name="filterStatus">
                <option value="All">All Status</option>
                <option value="Pending">Pending</option>
                <option value="Approved">Approved</option>
                <option value="Rejected">Rejected</option>
            </select>

            <div class="input-group date-range-box">
                <input type="text" class="form-control dateInput" id="filterFromDate" name="filterFromDate"
                    placeholder="From Date" readonly />
                <input type="text" class="form-control dateInput" id="filterToDate" name="filterToDate"
                    placeholder="To Date"
                    style="border-top-right-radius:0.375rem !important; border-bottom-right-radius: 0.375rem !important;"
                    readonly />
                <button type="button" class="clear-button" style="display: none; padding-bottom: 5px;">x</button>
            </div>

            <input type=" text" class="form-control" id="filterLoginId" name="filterLoginId"
                placeholder="Filter by Login ID" value="" />
            <button type="button" class="apply-btn" id="applyFilters">Apply</button>
        </div> *@
        <div class="body-content">
            <div class="content-header">
                <h3>Transaction Records</h3>
                <div class="global-search">
                    <input type="text" placeholder="Global search..." />
                    <button class="add-btn"><i class="fas fa-search"></i> Search</button>
                </div>
            </div>
            <table class="data-table">
                <thead>
                    <tr>
                        <th data-sort="TransactionId">
                            Transaction ID
                            <div class="table-filter">
                                <input type="text" id="filterTransactionId" placeholder="Filter ID" />
                            </div>
                        </th>
                        <th data-sort="Login">
                            Login
                            <div class="table-filter">
                                <input type="text" id="filterLogin" placeholder="Filter Login" />
                            </div>
                        </th>
                        <th data-sort="Client">
                            Client
                            <div class="table-filter">
                                <input type="text" id="filterClient" placeholder="Filter Client" />
                            </div>
                        </th>
                        <th data-sort="TransactionType">
                            Method
                            <div class="table-filter">
                                <select itemid="filterMethod" id="filterTransactionType">
                                    <option value="All">All Methods</option>
                                    <option value="Deposit">Credit Card</option>
                                    <option value="Withdrawal">PayPal</option>
                                </select>
                            </div>
                        </th>
                        <th data-sort="Amount">
                            Amount
                            <div class="table-filter">
                                <select itemid="filterAmount" id="filterAmount">
                                    <option value="All">All Amounts</option>
                                    <option value="1">0 - 100</option>
                                    <option value="2">100 - 500</option>
                                    <option value="3">500 - 1000</option>
                                    <option value="4">1000+</option>
                                </select>
                            </div>
                        </th>
                        <th data-sort="Fee">
                            Fee
                            <div class="table-filter">
                                <input type="text" itemid="filterFee" id="filterFee" placeholder="Filter Fee" />
                            </div>
                        </th>
                        <th data-sort="Status">
                            Status
                            <div class="table-filter">
                                <select itemid="filterStatus" id="filterStatus">
                                    <option value="All">All Statuses</option>
                                    <option value="0">Pending</option>
                                    <option value="1">Approved</option>
                                    <option value="2">Rejected</option>
                                    <option value="3">Failed</option>
                                </select>
                            </div>
                        </th>
                        <th data-sort="TransactionDate">
                            Date
                            <div class="table-filter">
                                <input id="filterStartDate" type="date" />
                                <input id="filterEndDate" type="date" />
                            </div>
                        </th>
                        <th></th>
                    </tr>
                </thead>
                <tbody id="transactionTableBody">
                    <partial name="_TransactionTable" model="Model" />
                </tbody>
            </table>
            <div class="pagination">
                <div class="pagination-info" id="paginationInfo">Showing 0 to 0 of 0 entries</div>
                <div class="pagination-controls" id="paginationControls">
                    <button id="prevPage">Previous</button>
                    <span id="pageButtons"></span>
                    <button id="nextPage">Next</button>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    document.addEventListener('DOMContentLoaded', function () {

        const tableBody = document.querySelector('#transactionTableBody');
        const filterInputs = document.querySelectorAll('.table-filter input');
        const filterSelects = document.querySelectorAll('.table-filter select');
        const paginationInfo = document.querySelector('#paginationInfo');
        const paginationControls = document.querySelector('#paginationControls');
        const prevPageBtn = document.querySelector('#prevPage');
        const nextPageBtn = document.querySelector('#nextPage');
        const pageButtons = document.querySelector('#pageButtons');
@* const filters = {}; *@
        let currentPage = 1;
        let pageSize = 15;
        let sortColumn = 'TransactionDate';
        let sortDirection = 'desc';

        const loginIdInput = document.getElementById('loginId');
        const suggestionsList = document.getElementById('loginIdSuggestions');

        loginIdInput.addEventListener('input', function () {
            const query = this.value;

            if (query.length < 2) {
                suggestionsList.style.display = 'none';
                return;
            }

            fetch(`/Transaction/GetSuggestions?query=${encodeURIComponent(query)}`)
                .then(response => response.json())
                .then(data => {
                    suggestionsList.innerHTML = '';
                    if (data.length > 0) {
                        data.forEach(user => {
                            const listItem = document.createElement('li');
                            listItem.className = 'list-group-item list-group-item-action';
                            listItem.textContent = `${user.mt5LoginID}-${user.name}-(${user.email})`;
                            listItem.addEventListener('click', function () {
                                loginIdInput.value = user.mt5LoginID;
                                suggestionsList.style.display = 'none';
                            });
                            suggestionsList.appendChild(listItem);
                        });
                        suggestionsList.style.display = 'block';
                    } else {
                        suggestionsList.style.display = 'none';
                    }
                })
                .catch(error => console.error('Error fetching suggestions:', error));
        });

        document.addEventListener('click', function (event) {
            if (!loginIdInput.contains(event.target) && !suggestionsList.contains(event.target)) {
                suggestionsList.style.display = 'none';
            }
        });

        const roundableInputs = document.querySelectorAll('.roundable');
        roundableInputs.forEach(input => {
            input.addEventListener('change', () => {
                let value = parseFloat(input.value);
                if (!isNaN(value)) {
                    input.value = value.toFixed(2);
                }
            });
        });
        //add transaction
        function addTransaction(actionType) {
            debugger;
            const form = document.querySelector('#transactionForm');
            const formData = new FormData(form);
            formData.append('actionType', actionType);

            fetch(form.action, {
                method: 'POST',
                body: formData
            })
                .then(response => response.json())
                .then(responseData => {
                    debugger;
                    if (responseData.success) {
                        Swal.fire({
                            toast: true,
                            position: 'top-end',
                            icon: 'success',
                            title: 'Success!',
                            text: responseData.message || "Transaction completed successfully.",
                            showConfirmButton: false,
                            timer: 3000,
                            timerProgressBar: true
                        });
                        // Update the table with the new transaction
                        const tbody = document.querySelector('table tbody');
                        const newRow = document.createElement('tr');

                        // Use responseData.transaction
                        const newTransaction = responseData.transaction || {};

                        // Format the date (assuming TransactionDate is in ISO format)
                        const transactionDate = new Date(newTransaction.transactionDate || new Date()).toLocaleString('en-US', {
                            year: 'numeric',
                            month: 'numeric',
                            day: 'numeric',
                            hour: '2-digit',
                            minute: '2-digit',
                            second: '2-digit',
                            hour12: false
                        });

                        // Determine status for display
                        const statusText = newTransaction.approvalStatus === 1 ? 'Approved' :
                            newTransaction.approvalStatus === 2 ? 'Rejected' : 'Pending';
                        const statusClass = newTransaction.approvalStatus === 1 ? 'status-approved' :
                            newTransaction.approvalStatus === 2 ? 'status-rejected' : 'status-pending';

                        // Create review button if status is Pending
                        const reviewButton = newTransaction.approvalStatus === 0 ?
                            `<button class="review status-tag status-review">Review</button>` : '';

                        // Populate the row with transaction data
                        newRow.innerHTML = `
                            <td>${newTransaction.transactionId || ''}</td>
                            <td>${newTransaction.login || ''}</td>
                            <td>${newTransaction.userName || ''}</td>
                            <td>${newTransaction.transactionType || ''} / Card Debit</td>
                            <td>${newTransaction.amount || ''}</td>
                            <td>${newTransaction.fee || ''}</td>
                            <td><span class="status-tag ${statusClass}">${statusText}</span></td>
                            <td>${transactionDate}</td>
                            <td>${reviewButton}</td>
                        `;

                        // Append the new row to the table
                        tbody.prepend(newRow);
                        form.reset();
                        // Optionally, you can reset the form or close the modal here
                        $('#TransactionModal').modal('hide');
                    } else {
                        Swal.fire({
                            toast: true,
                            position: 'top-end',
                            icon: 'error',
                            title: 'Error!',
                            text: responseData.message || "Transaction failed.",
                            showConfirmButton: false,
                            timer: 3000,
                            timerProgressBar: true
                        });
                    }
                })
                .catch(error => {
                    Swal.fire({
                        toast: true,
                        position: 'top-end',
                        icon: 'error',
                        title: 'Error!',
                        text: 'An unexpected error occurred.',
                        showConfirmButton: false,
                        timer: 3000,
                        timerProgressBar: true
                    });
                });
        }
        //submitTransaction
        document.getElementById('submitTransaction').addEventListener('click', function () {
            addTransaction('submit');
        });
        //submitAndApproveTransaction
        document.getElementById('submitAndApproveTransaction').addEventListener('click', function () {
            addTransaction('submitAndApprove');
        });

        // Review buttons
        document.querySelector('table').addEventListener('click', function (event) {
            if (event.target.classList.contains('review')) {
                const row = event.target.closest('tr');
                const transactionId = row.cells[0].textContent;
                Swal.fire({
                    title: 'Review Transaction',
                    text: `Do you want to approve or reject transaction ID ${transactionId}?`,
                    showDenyButton: true,
                    showCancelButton: true,
                    confirmButtonText: 'Approve',
                    denyButtonText: 'Reject',
                }).then((result) => {
                    if (result.isConfirmed) {
                        updateTransactionStatus(parseInt(transactionId), 1); // Approve
                    } else if (result.isDenied) {
                        updateTransactionStatus(parseInt(transactionId), 2); // Reject
                    }
                });
            }
        });
        //Update transaction status
        function updateTransactionStatus(transactionId, action) {
            fetch(`/Transaction/UpdateTransactionStatus`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ transactionId: transactionId, approvalStatus: action })
            })
                .then(response => response.json())
                .then(responseData => {
                    if (responseData.success) {
                        Swal.fire({
                            toast: true,
                            position: 'top-end',
                            icon: 'success',
                            title: 'Success!',
                            text: responseData.message || "Transaction status updated successfully.",
                            showConfirmButton: false,
                            timer: 3000,
                            timerProgressBar: true
                        })
                        const row = Array.from(document.querySelectorAll('table tbody tr')).find(tr => tr.cells[0].textContent == transactionId);
                        if (row) {
                            debugger;
                            const statusCell = row.cells[6];
                            const statusText = responseData.transaction.status === 1 ? 'Approved' :
                                responseData.transaction.status === 2 ? 'Rejected' : 'Pending';
                            const statusClass = responseData.transaction.status === 1 ? 'status-approved' :
                                responseData.transaction.status === 2 ? 'status-rejected' : 'status-pending';

                            statusCell.innerHTML = `<span class="status-tag ${statusClass}">${statusText}</span>`;
                            debugger;
                            const reviewCell = row.cells[8];
                            if (responseData.transaction.status === 1 || responseData.transaction.status === 2) {
                                // Remove the Review button for Approved or Rejected
                                reviewCell.innerHTML = '';
                            } else {
                                debugger;
                                // Ensure Review button exists for Pending
                                reviewCell.innerHTML = `<button class="review status-tag status-review">Review</button>`;
                            }
                        }

                    } else {
                        Swal.fire({
                            toast: true,
                            position: 'top-end',
                            icon: 'error',
                            title: 'Error!',
                            text: responseData.message || "Failed to update transaction status.",
                            showConfirmButton: false,
                            timer: 3000,
                            timerProgressBar: true
                        });
                    }
                })
                .catch(error => {
                    Swal.fire({
                        toast: true,
                        position: 'top-end',
                        icon: 'error',
                        title: 'Error!',
                        text: 'An unexpected error occurred.',
                        showConfirmButton: false,
                        timer: 3000,
                        timerProgressBar: true
                    });
                });
        }
        
        // Render table rows
        const renderTable = (data) => {
            tableBody.innerHTML = '';
            if (data.data.length === 0) {
                tableBody.innerHTML = '<tr><td colspan="9"><div class="no-data"><i class="fa fa-inbox"></i><p>No transactions found</p></div></td></tr>';
                return;
            }
            data.data.forEach(row => {
                const tr = document.createElement('tr');
                // Format the date
                const transactionDate = new Date(row.transactionDate || new Date()).toLocaleString('en-US', {
                    year: 'numeric',
                    month: 'numeric',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit',
                    second: '2-digit',
                    hour12: false
                });

                // Determine status
                const statusText = row.approvalStatus === 1 ? 'Approved' :
                    row.approvalStatus === 2 ? 'Rejected' : 'Pending';
                const statusClass = row.approvalStatus === 1 ? 'status-approved' :
                    row.approvalStatus === 2 ? 'status-rejected' : 'status-pending';

                // Create review button if status is Pending
                const reviewButton = row.approvalStatus === 0 ?
                    `<button class="review status-tag status-review">Review</button>` : '';

                // Populate row
                tr.innerHTML = `
                <td>${row.transactionId || ''}</td>
                <td>${row.login || ''}</td>
                <td>${row.userName || ''}</td>
                <td>${row.transactionType || ''}</td>
                <td>${(row.amount || 0).toFixed(2)}</td>
                <td>${(row.fee || 0).toFixed(2)}</td>
                <td><span class="status-tag ${statusClass}">${statusText}</span></td>
                <td>${transactionDate}</td>
                <td>${reviewButton}</td>
            `;
                tableBody.appendChild(tr);
            });
        };

        // Update pagination controls
        const updatePagination = (data) => {
            debugger;
            const { filteredRecords, currentPage, pageSize } = data;
            const totalPages = Math.ceil(filteredRecords / pageSize);
            paginationInfo.textContent = `Showing ${(currentPage - 1) * pageSize + 1} to ${Math.min(currentPage * pageSize, filteredRecords)} of ${filteredRecords} entries`;

            pageButtons.innerHTML = '';
            const maxButtons = 5;
            let startPage = Math.max(1, currentPage - Math.floor(maxButtons / 2));
            let endPage = Math.min(totalPages, startPage + maxButtons - 1);
            startPage = Math.max(1, endPage - maxButtons + 1);

            for (let i = startPage; i <= endPage; i++) {
                const btn = document.createElement('button');
                btn.textContent = i;
                if (i === currentPage) btn.classList.add('active');
                btn.addEventListener('click', () => {
                    currentPage = i;
                    fetchData();
                });
                pageButtons.appendChild(btn);
            }

            prevPageBtn.disabled = currentPage === 1;
            nextPageBtn.disabled = currentPage === totalPages;
        };

        // Fetch data from API
        const fetchData = async () => {
            debugger;
            const filters = {
                filterTransactionId: document.querySelector('#filterTransactionId').value,
                filterLogin: document.querySelector('#filterLogin').value,
                filterClient: document.querySelector('#filterClient').value,
                filterTransactionType: document.querySelector('#filterTransactionType').value,
                filterAmount: document.querySelector('#filterAmount').value,
                filterFee: document.querySelector('#filterFee').value,
                filterStatus: document.querySelector('#filterStatus').value,
                filterStartDate: document.querySelector('#filterStartDate').value,
                filterEndDate: document.querySelector('#filterEndDate').value,
                page: currentPage,
                pageSize: pageSize,
                sortColumn: sortColumn,
                sortDirection: sortDirection
            };

            try {
                const response = await fetch('/Transaction/GetFilteredTransactions', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(filters)
                });
                if (!response.ok) throw new Error('Network error');
                const responseData = await response.json();
                renderTable(responseData);
                updatePagination(responseData);
            } catch (error) {
                console.error('Error:', error);
                tableBody.innerHTML = '<tr><td colspan="9"><div class="no-data"><i class="fa fa-inbox"></i><p>No transactions found</p></div></td></tr>';
                Swal.fire({
                    toast: true,
                    position: 'top-end',
                    icon: 'error',
                    title: 'Error!',
                    text: 'Failed to load transactions.',
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true
                });
            }
        };

        // Apply filters
        const applyFilters = () => {
            debugger;
            currentPage = 1; // Reset to first page on filter change
            fetchData();
        };
        
        filterInputs.forEach(input => {
            input.addEventListener('keydown', (event) => {
                debugger;
                if (event.key === 'Enter') {
                    applyFilters();
                }
            });
        });
        filterSelects.forEach(select => {
            select.addEventListener('change', applyFilters);
        })

        
        // Handle sorting
        @* const headers = document.querySelectorAll('th[data-sort]');
        headers.forEach(header => {
            header.addEventListener('click', () => {
                const column = header.dataset.sort;
                if (sortColumn === column) {
                    sortDirection = sortDirection === 'asc' ? 'desc' : 'asc';
                } else {
                    sortColumn = column;
                    sortDirection = 'asc';
                }
                currentPage = 1;
                fetchData();
            });
        }); *@

        // Pagination button listeners
        prevPageBtn.addEventListener('click', () => {
            if (currentPage > 1) {
                currentPage--;
                fetchData();
            }
        });
        nextPageBtn.addEventListener('click', () => {
            currentPage++;
            fetchData();
        });

    });
</script>
